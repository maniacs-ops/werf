project: example-2
configVersion: 1
---
{{ $_ := set . "RUBY_VERSION" "2.7.1" }}
{{ $_ := set . "NODE_MAJOR" "12" }}
{{ $_ := set . "BUNDLER_VERSION" "2.1.4" }}
---
artifact: build
from: ruby:{{ .RUBY_VERSION }}
git:
- add: /
  to: /app
  stageDependencies:
    install:
    - Gemfile
    - Gemfile.lock
    setup:
    - '*'
ansible:
  beforeInstall:
  - name: install node
    shell: curl -sL https://deb.nodesource.com/setup_{{ .NODE_MAJOR }}.x | bash -
  - name: install yarn repo
    shell:
      curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - \
      && echo 'deb http://dl.yarnpkg.com/debian/ stable main' > /etc/apt/sources.list.d/yarn.list
  - name: Update repositories cache
    shell: apt-get update -qq
  - name: install dependencies
    apt:
      name:
      - nodejs
      - yarn
  - name: install bundler
    shell: gem install bundler:{{ .BUNDLER_VERSION }}
  install:
  - name: bundle install
    shell: bundle config set without 'development test' && bundle install
    args:
      chdir: /app
  - name: webpacker install
    shell: RAILS_ENV=production rails webpacker:install
    args:
      chdir: /app
  setup:
  - name: build assets
    shell: RAILS_ENV=production SECRET_KEY_BASE=fake bundle exec rake assets:precompile
    args:
      chdir: /app
---
image: rails
from: ruby:{{ .RUBY_VERSION }}-slim
docker:
  WORKDIR: /app
ansible:
  beforeInstall:
  - name: install bundler
    shell: gem update --system && gem install bundler:{{ .BUNDLER_VERSION }}
import:
- artifact: build
  add: /usr/local/bundle
  after: install
- artifact: build
  add: /app
  after: install
---
image: assets
from: nginx:alpine
ansible:
  beforeInstall:
  - name: Add nginx config
    copy:
      content: |
{{ .Files.Get ".werf/nginx.conf" | indent 8 }}
      dest: /etc/nginx/nginx.conf
import:
- artifact: build
  add: /app/public
  to: /www
  after: setup
